#!/usr/bin/env python
# coding=utf8
#
# 建立 CLI 命令列界面，整合指令的使用方式
#
# Author: Chun-Yu Lee (Mat) <matlinuxer2@gmail.com>
# License: MIT
#

from __future__ import print_function
import argparse
from common import *
from lib.Config import Config
from lib.Wikidot import Wikidot


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcmd')

    # 通用選項
    parser.add_argument('-n', '--dry-run', help='跳過會寫入的動作', dest='dryrun', action='store_true')
    parser.add_argument('-v', '--verbose', help='顯示更詳細的訊息', dest='verbose', action='store_true')

    # sub command for "search"
    parser_sub = subparsers.add_parser('search', help='搜尋線上通訊錄')
    parser_sub.add_argument('params', nargs='*', help='search keyword')

    # sub command for "notify"
    parser_sub = subparsers.add_parser('notify', help='內容更新通知')
    parser_sub.add_argument('--wiki', help='使用 wiki', dest='use_wiki', action='store_true')

    # sub command for "invite"
    parser_sub = subparsers.add_parser('invite', help='發送聚會通告')
    parser_sub.add_argument('--fb', help='使用 facebook', dest='use_fb', action='store_true')
    parser_sub.add_argument('--ptt', help='使用 ptt', dest='use_ptt', action='store_true')
    parser_sub.add_argument('--email', help='使用 email', dest='use_email', action='store_true')

    # sub command for "wikidot"
    parser_sub = subparsers.add_parser('wikidot', help='wikidot操作')
    parser_sub.add_argument('--do-index', help='更新編目', dest='do_index', action='store_true')
    parser_sub.add_argument('--do-newpage', help='新增當週頁面', dest='do_newpage', action='store_true')
    parser_sub.add_argument('--do-rebuild', help='更新作者頁面from聚會手記', dest='do_rebuild', action='store_true')

    args = parser.parse_args()
    #print args; exit()

    if args.subcmd is None:
        parser.print_help()

    elif args.subcmd == "search":
        print("搜尋通訊錄", args.params)
        config = Config()
        googledoc_user = config['googledoc']['email']
        googledoc_pass = config['googledoc']['password']
        spreadsheet = config['googledoc']['spreadsheet']
        worksheet = config['googledoc']['worksheet']

        result = fetch_googledoc_spreadsheet(googledoc_user, googledoc_pass, spreadsheet, worksheet)
        for keyword in args.params:
                result = search_userdata(result, keyword)

        for k in result.keys():
                row = result[k]
                print("=" * 60)
                show_userdata(row)

    elif args.subcmd == "invite":
        print("發送聚會通告")
        if args.use_fb:
                print("發送聚會通告 -> FB")  # 用來取代 h4_create_fb_event.py

        if args.use_ptt:
                print("發送聚會通告 -> PTT")  # 用來取代 h4_post_ptt_event_telnetlib.py

        if args.use_email:
                print("發送聚會通告 -> Mailling list")  # 用來取代 h4_invitation_notifier

    elif args.subcmd == "notify":
        if args.use_wiki:
            print("發送 wiki 聚會手記")  # 用來取代 h4_wiki_notifier

    elif args.subcmd == "wikidot":
        if args.do_index:
            config = Config()
            api_user = config['wikidot']['wikidot_api_user']
            api_key = config['wikidot']['wikidot_api_key']
            site = 'hackingthursday'

            wikidot = Wikidot()
            wikidot.auth(api_user, api_key)
            wikidot.set_site(site)

            selecte_pages = []
            collection = []
            metadatas = []

            mask_pages = [
                'faq',
                'funding',
                'invite',
                'photoandvideo',
                'routine',
                'sandbox',
                'start',
            ]

            all_pages = wikidot.list_pages()
            for page in all_pages:
                    prefix = ""
                    if page.split(':').__len__() > 1:
                            prefix = page.split(':')[0]

                    if page[0:2] == "20" and page[4] == "-" and page[7] == "-":
                            pass
                    elif prefix != "":
                            pass
                    else:
                            isInMask = False
                            if page in mask_pages:
                                    isInMask = True
                            if not isInMask:
                                    selecte_pages += [page]

            # 依更新日期作排序，最新的擺前面
            for i in range(0, selecte_pages.__len__(), 10):
                    if i + 10 <= selecte_pages.__len__():
                            metadatas += wikidot.get_pages_meta(selecte_pages[i:i + 10]).items()
                    else:
                            metadatas += wikidot.get_pages_meta(selecte_pages[i:selecte_pages.__len__()]).items()

            metadatas.sort(key=lambda x: x[1].get('updated_at'), reverse=True)
            selecte_pages = []
            print(metadatas)
            for item in metadatas:
                    selecte_pages.append(item[0])

            # 開始產生選單
            page_of_index = ""
            for page in selecte_pages:
                    print("處理頁面: ", page)
                    metadata = wikidot.get_pages_meta([page])
                    fullname = metadata.get(page).get('fullname').encode('utf8')
                    title = metadata.get(page).get('title').encode('utf8')
                    page_of_index += " * [[[%s|%s]]]\n" % (fullname, title)

            # 將新列表塞到主選單中
            nav_page = "nav:top"
            keyword_beg = "\n* [# Wiki]\n"
            keyword_end = "[!--Wiki--]"

            nav_top_page = wikidot.get_page(nav_page)
            nav_top_content = nav_top_page["content"].encode('utf8')

            new_nav_top_content = find_keyword_and_insert_content(nav_top_content, keyword_beg, keyword_end, page_of_index)

            print(new_nav_top_content)
            if args.dryrun is not True:
                wikidot.save_page(nav_page, content=new_nav_top_content)
            else:
                print("dryrun 模式，未寫入")

        if args.do_newpage:
            print("新建 wiki 當週頁面")  # 用來取代 h4_wikidot_page_creater

        if args.do_rebuild:
            print("更新 wiki 個人頁面")  # 用來取代 h4_wikidot_rebuild

    else:
        pass
